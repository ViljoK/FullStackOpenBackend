{"version":3,"sources":["services/persons.js","components/Contact.jsx","components/Contacts.jsx","components/Input.jsx","components/FormTable.jsx","components/InputTable.jsx","components/Notification.jsx","App.jsx","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newPerson","post","id","number","put","concat","delete","Contact","_ref","name","deletePerson","react_default","a","createElement","className","type","onClick","Contacts","persons","filter","contactsToShow","person","toLowerCase","includes","Fragment","map","components_Contact","key","Input","handler","value","reff","ref","onChange","defaultProps","FormTable","inputs","onsubmit","onSubmit","input","components_Input","InputTable","Notification","message","divStyle","margin","padding","border","borderRadius","width","backgroundColor","color","style","textAlign","text","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","setFilter","_useState9","_useState10","setMessage","useEffect","personService","initialPersons","length","nameRef","useRef","numberRef","addStates","event","target","filterStates","components_FormTable","preventDefault","existingPerson","find","obj","undefined","window","confirm","updatedPersons","current","focus","setTimeout","returnedPerson","catch","error","errorName","errorMessage","components_InputTable","components_Contacts","persist","index","findIndex","newPersons","components_Notification","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0a2b2dc3.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then((response) => response.data)\n}\nconst create = (newPerson) => {\n    const request = axios.post(baseUrl, newPerson)\n    return request.then((response) => response.data)\n}\nconst update = (id, number) => {\n    const request = axios.put(`${baseUrl}/${id}`, { number })\n    return request.then((response) => response.data)\n}\nconst drop = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then((response) => response.data)\n}\nexport default {\n    getAll, create, update, drop,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Contact = ({\n    name, number, deletePerson, id,\n}) => (\n    <tr>\n        <td className=\"name\">{name}</td>\n        <td className=\"phone\">{number}</td>\n        <td>\n            <button type=\"button\" id={id} onClick={deletePerson}>Delete</button>\n        </td>\n    </tr>\n)\n\nContact.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    deletePerson: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n}\n\nexport default Contact\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Contact from './Contact'\n\nconst Contacts = ({\n    persons, filter, deletePerson,\n}) => {\n    const showAll = filter === ''\n\n    const contactsToShow = showAll\n        ? persons\n        : persons.filter((person) => {\n            if (person.name.toLowerCase().includes(filter.toLowerCase())) {\n                return true\n            }\n            return false\n        })\n\n    const rows = () => contactsToShow.map((person) => (\n        <Contact\n            key={person.id}\n            id={person.id}\n            name={person.name}\n            number={person.number}\n            deletePerson={deletePerson}\n        />\n    ))\n    return (\n        <>\n            <table>\n                <tbody>\n                    {rows()}\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nContacts.propTypes = {\n    persons: PropTypes.array.isRequired,\n    filter: PropTypes.string.isRequired,\n    deletePerson: PropTypes.func.isRequired,\n}\n\nexport default Contacts\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Input = ({ handler, value, reff }) => <input type=\"text\" ref={reff} value={value} onChange={handler} />\n\nInput.propTypes = {\n    handler: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n    reff: PropTypes.object,\n}\n\nInput.defaultProps = {\n    reff: null,\n}\n\nexport default Input\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Input from './Input'\n\nconst FormTable = ({ inputs, onsubmit }) => {\n    const rows = () => inputs.map((input) => (\n        <tr key={input.id}>\n            <td>{input.name}</td>\n            <td>\n                <Input reff={input.ref} handler={input.handler} value={input.value} />\n            </td>\n        </tr>\n    ))\n    return (\n        <>\n            <form onSubmit={onsubmit}>\n                <table>\n                    <tbody>\n                        {rows()}\n                    </tbody>\n                </table>\n                <button type=\"submit\">Add</button>\n            </form>\n        </>\n    )\n}\n\nFormTable.propTypes = {\n    inputs: PropTypes.array.isRequired,\n    onsubmit: PropTypes.func.isRequired,\n}\n\nexport default FormTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Input from './Input'\n\nconst InputTable = ({ inputs }) => {\n    const rows = () => inputs.map((input) => (\n        <tr key={input.id}>\n            <td>{input.name}</td>\n            <td>\n                <Input handler={input.handler} value={input.value} />\n            </td>\n        </tr>\n    ))\n    return (\n        <>\n            <table>\n                <tbody>\n                    {rows()}\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nInputTable.propTypes = {\n    inputs: PropTypes.array.isRequired,\n}\n\nexport default InputTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    const divStyle = {\n        margin: '20px 0 0 20px',\n        padding: 10,\n        border: '1px solid black',\n        borderRadius: 10,\n        width: '80%',\n        backgroundColor: message.color,\n    }\n    const msgStyle = {\n        width: '95%',\n        margin: '0 auto 0 auto',\n        textAlign: 'center',\n    }\n\n    return (\n        <>\n            <div style={divStyle}>\n                <p style={msgStyle}>{message.text}</p>\n            </div>\n        </>\n    )\n}\n\nNotification.propTypes = {\n    message: PropTypes.object,\n}\n\nNotification.defaultProps = {\n    message: null,\n}\n\nexport default Notification\n","import React, { useState, useRef, useEffect } from 'react'\nimport personService from './services/persons'\nimport Contacts from './components/Contacts'\nimport FormTable from './components/FormTable'\nimport InputTable from './components/InputTable'\nimport Notification from './components/Notification'\nimport './index.css'\n\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [message, setMessage] = useState(null)\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then((initialPersons) => {\n                setPersons(initialPersons)\n            })\n    }, [persons.length])\n\n    const nameRef = useRef('')\n    const numberRef = useRef('')\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        if (newName === '') {\n            nameRef.current.focus()\n            return\n        }\n        if (newNumber === '') {\n            numberRef.current.focus()\n            return\n        }\n        const existingPerson = persons.find((obj) => obj.name === newName)\n        if (existingPerson !== undefined) {\n            if (window.confirm(`Henkilö ${existingPerson.name} löytyy jo osoitekirjasta. \\nHaluatko päivittää numeron?`)) {\n                personService\n                    .update(existingPerson.id, newNumber)\n                    .then((updatedPersons) => {\n                        setPersons(updatedPersons)\n                        setNewName('')\n                        setNewNumber('')\n                        nameRef.current.focus()\n                        setMessage({ text: 'Update successfull', color: 'lightgreen' })\n                        setTimeout(() => {\n                            setMessage(null)\n                        }, 4000)\n                    })\n            }\n        } else {\n            const newPerson = {\n                name: newName,\n                number: newNumber,\n            }\n            personService\n                .create(newPerson)\n                .then((returnedPerson) => {\n                    setPersons(persons.concat(returnedPerson))\n                    setNewName('')\n                    setNewNumber('')\n                    nameRef.current.focus()\n                    setMessage({ text: `${returnedPerson.name} added`, color: 'lightgreen' })\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 4000)\n                })\n                .catch((error) => {\n                    const errorName = error.response.data.name\n                    let errorMessage = ''\n                    if (errorName === 'ValidationError') {\n                        errorMessage = ': Name min 3 chars, Number min 10 numbers'\n                    }\n                    setMessage({ text: `${errorName}${errorMessage}`, color: 'salmon' })\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 4000)\n                })\n        }\n    }\n\n    const deletePerson = (event) => {\n        event.persist()\n        const index = persons.findIndex((person) => person.id === event.target.id)\n        if (window.confirm(`Do you really want to delete ${persons[index].name}`)) {\n            personService\n                .drop(event.target.id)\n                .then((newPersons) => {\n                    setPersons(newPersons)\n                    setMessage({ text: 'Delete successful', color: 'lightgreen' })\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 4000)\n                })\n                .catch(() => {\n                    setMessage({ text: 'Error: Allready deleted', color: 'red' })\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 4000)\n                })\n        }\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value)\n    }\n\n    const addStates = [\n        {\n            name: 'Name',\n            value: newName,\n            handler: handleNameChange,\n            id: 1,\n            ref: nameRef,\n        },\n        {\n            name: 'Number',\n            value: newNumber,\n            handler: handleNumberChange,\n            id: 2,\n            ref: numberRef,\n        },\n    ]\n\n    const filterStates = [\n        {\n            name: 'Find',\n            value: filter,\n            handler: handleFilterChange,\n            id: 1,\n        },\n    ]\n\n    const appStyle = {\n        width: '90%',\n        margin: '0 auto 0 auto',\n        borderRadius: 10,\n    }\n    const h1Style = {\n        textAlign: 'center',\n    }\n\n    return (\n        <div style={appStyle}>\n            <h1 style={h1Style}>Phonebook</h1>\n            <h2>Add new</h2>\n            <FormTable inputs={addStates} onsubmit={addPerson} />\n            <h2>Contacts</h2>\n            <InputTable inputs={filterStates} />\n            <Contacts persons={persons} filter={filter} deletePerson={deletePerson} />\n            <Notification message={message} />\n        </div>\n    )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}